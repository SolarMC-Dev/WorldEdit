println """
*******************************************
 You are building WorldEdit!

 If you encounter trouble:
 1) Read COMPILING.md if you haven't yet
 2) Try running 'build' in a separate Gradle run
 3) Use gradlew and not gradle
 4) If you still need help, ask on IRC! irc.esper.net #sk89q

 Output files will be in [subproject]/build/libs
*******************************************
"""

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.21.0'
        classpath 'org.ajoberstar:gradle-git:1.5.1'
    }
}

allprojects {
    group = 'gg.solarmc.worldedit'
    version = '6.1.9'
}

if (!project.hasProperty("gitCommitHash") && !JavaVersion.current().isJava6()) {
    try {
        def repo = org.ajoberstar.grgit.Grgit.open(dir: '.')
        ext.gitCommitHash = repo.head().abbreviatedId
    } catch (Exception e) {
        println "Error getting commit hash: " + e.getMessage()
    }
}
if (!project.hasProperty("gitCommitHash")) {
    ext.gitCommitHash = "no_git_id"
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    ext.internalVersion = version + ";" + gitCommitHash

    sourceCompatibility = 16
    targetCompatibility = 16

    repositories {
        mavenCentral()
        maven { url "https://maven.sk89q.com/repo/" }
        maven { url "https://mvn-repo.solarmc.gg/releases" }
        maven { url "https://mvn-repo.arim.space/lesser-gpl3/" }
    }

    configurations {
        testImplementation.extendsFrom compileOnly
    }

    dependencies {
        testImplementation "junit:junit:4.13.1"
    }

    if (JavaVersion.current().isJava8Compatible()) {
        // Java 8 turns on doclint which we fail
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives javadocJar
    }

    if (!(name.equals('worldedit-forge') || name.equals('worldedit-sponge'))) {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives sourcesJar
        }
        build.dependsOn(sourcesJar)
    }

    build.dependsOn(javadocJar)

    shadowJar {
        classifier ""
        dependencies {
            include(dependency('com.sk89q:jchronic:0.2.4a'))
            include(dependency('com.thoughtworks.paranamer:paranamer:2.6'))
            include(dependency('com.sk89q.lib:jlibnoise:1.0.0'))
        }
        exclude 'GradleStart**'
        exclude '.cache'
        exclude 'LICENSE*'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
        }
        repositories {
            maven {
                credentials {
                    username System.getenv("REPO_USER")
                    password System.getenv("REPO_PASS")
                }

                name = 'solar-repo'
                def base = 'https://mvn-repo.solarmc.gg'
                def releasesRepoUrl = "$base/releases"
                def snapshotsRepoUrl = "$base/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }
}
